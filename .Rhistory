existingDF
existingDF <- existingDF[-1,]
existingDF
Dax <- read.csv("Data//CommonDate//Dax_2000_d.csv")
source("Dev.R")
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -50, "Dax"); a
source("Dev.R")
a <- BaseSystem1Quant902(Dax, -100, "Dax"); a
b <- BaseSystem1Quant902(Dax, -50, "Dax"); b
c <- BaseSystem1Quant902(Dax, 0, "Dax"); c # No SLOss
existingDF <- as.data.frame(matrix(seq(10),nrow=1,ncol=10))
names(existingDF) <- names(a)
existingDF <- existingDF[-1,]
existingDF <- rbind(existingDF, a, b, c)
existingDF
a <- BaseSystem1Quant902(Dax, -100, "Dax"); a
b <- BaseSystem1Quant902(Dax, -50, "Dax"); b
c <- BaseSystem1Quant902(Dax, 0, "Dax"); c # No SLOss
existingDF <- as.data.frame(matrix(seq(10),nrow=1,ncol=10))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c)
existingDF <- existingDF[-1,] ; existingDF
install.packages("xtable")
\lhead{Chapter 4. \emph{Implementation and Experimentation}}
Dax <- read.csv("Data//CommonDate//Dax_2000_d.csv")
Dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//Data//Dax_2000_d.csv")
source("Dev.R")
BaseSystem1SMA(Dax, 200, -50, "Dax")
source("Dev.R")
BaseSystem1SMA(Dax, 200, -50, "Dax")
source("Dev.R")
BaseSystem1SMA(Dax, 200, -50, "Dax")
BaseSystem1SMA <- function(Mkt, sma, SLoss, MktName){
# Calculates the profit/loss from trading according to SMA.
#
# Args:
#   x:
#   y:
#
# Returns:
#   profit/loss from trading according to SMA.
results <- 1:10
names(results) <- c("Mkt", "S Loss", "LongPL","ShortPL",
"L Win %", "Av L Win", "Av L Loss", "S Win %", "Av S Win", "Av S Loss")
sma.value <- SMA(Mkt["Open"], sma)  #create sma vector
Mkt <- cbind(Mkt, sma.value)        #add sma vector as new col
Mkt$Long <- ifelse(Mkt$Open > Mkt$sma.value, Mkt$Close - Mkt$Open, NA)
if (SLoss < 0) {
Mkt$Long <- ifelse(Mkt$Long < SLoss, SLoss, Mkt$Long)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
}
Mkt$Short <- ifelse(Mkt$Open < Mkt$sma.value, Mkt$Open - Mkt$Close, NA)
if (SLoss < 0) {
Mkt$Short <- ifelse(Mkt$Short < SLoss, SLoss, Mkt$Short)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
}
# Long Winner %
results["L Win %"] <- calcWinPer(Mkt$Long)
# Av Long Win
results["Av L Win"] <- calcAverageWin(Mkt$Long[Mkt$Long > 0])
# Av Long Loss
results["Av L Loss"] <- calcAverageWin(Mkt$Long[Mkt$Long < 0])
# Short Winner %
results["S Win %"] <- calcWinPer(Mkt$Short)
# Av Short Win
results["Av S Win"] <- calcAverageWin(Mkt$Short[Mkt$Short > 0])
# Av Short Loss
results["Av S Loss"] <- calcAverageWin(Mkt$Short[Mkt$Short < 0])
results <- round(results)
results["Mkt"] <- MktName
results["S Loss"] <- SLoss
return(results)
}
Dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//Data//Dax_2000_d.csv")
a <- BaseSystem1SMA(Dax, 5, 0, "Dax")
b <- BaseSystem1SMA(Dax, 25, 0, "Dax")
c <- BaseSystem1SMA(Dax, 50, 0, "Dax")
d <- BaseSystem1SMA(Dax, 100, 0, "Dax")
e <- BaseSystem1SMA(Dax, 200, 0, "Dax")
calcWinPer <- function(x){
wins <- length(x[x>0])
losses <- length(x[x<0])
return(wins/(wins+losses)*100)
}
calcAverageWin <- function(x){
#browser()
wins <- length(x)
winpl <- sum(x, na.rm=T)
return((winpl/wins))
}
a <- BaseSystem1SMA(Dax, 5, 0, "Dax")
b <- BaseSystem1SMA(Dax, 25, 0, "Dax")
c <- BaseSystem1SMA(Dax, 50, 0, "Dax")
d <- BaseSystem1SMA(Dax, 100, 0, "Dax")
e <- BaseSystem1SMA(Dax, 200, 0, "Dax")
existingDF <- as.data.frame(matrix(seq(10),nrow=1,ncol=10))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c)
existingDF <- existingDF[-1,] ; existingDF
existingDF <- as.data.frame(matrix(seq(10),nrow=1,ncol=10))
existingDF
names(existingDF) <- names(a)
existingDF
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF
Dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//Data//Dax_2000_d.csv")
source("Dev.R")
BaseSystem1SMA(Dax, 200, -50, "Dax")
Dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//Data//Dax_2000_d.csv")
a <- BaseSystem1SMA(Dax, 5, 0, "Dax")
a
library(TTR)
calcWinPer <- function(x){
wins <- length(x[x>0])
losses <- length(x[x<0])
return(wins/(wins+losses)*100)
}
calcAverageWin <- function(x){
#browser()
wins <- length(x)
winpl <- sum(x, na.rm=T)
return((winpl/wins))
}
BaseSystem1SMA <- function(Mkt, sma, SLoss, MktName){
# Calculates the profit/loss from trading according to SMA.
#
# Args:
#   x:
#   y:
#
# Returns:
#   profit/loss from trading according to SMA.
results <- 1:10
names(results) <- c("Mkt", "S Loss", "LongPL","ShortPL",
"L Win %", "Av L Win", "Av L Loss", "S Win %", "Av S Win", "Av S Loss")
sma.value <- SMA(Mkt["Open"], sma)  #create sma vector
Mkt <- cbind(Mkt, sma.value)        #add sma vector as new col
Mkt$Long <- ifelse(Mkt$Open > Mkt$sma.value, Mkt$Close - Mkt$Open, NA)
if (SLoss < 0) {
Mkt$Long <- ifelse(Mkt$Long < SLoss, SLoss, Mkt$Long)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
}
Mkt$Short <- ifelse(Mkt$Open < Mkt$sma.value, Mkt$Open - Mkt$Close, NA)
if (SLoss < 0) {
Mkt$Short <- ifelse(Mkt$Short < SLoss, SLoss, Mkt$Short)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
}
# Long Winner %
results["L Win %"] <- calcWinPer(Mkt$Long)
# Av Long Win
results["Av L Win"] <- calcAverageWin(Mkt$Long[Mkt$Long > 0])
# Av Long Loss
results["Av L Loss"] <- calcAverageWin(Mkt$Long[Mkt$Long < 0])
# Short Winner %
results["S Win %"] <- calcWinPer(Mkt$Short)
# Av Short Win
results["Av S Win"] <- calcAverageWin(Mkt$Short[Mkt$Short > 0])
# Av Short Loss
results["Av S Loss"] <- calcAverageWin(Mkt$Short[Mkt$Short < 0])
results <- round(results)
results["Mkt"] <- MktName
results["S Loss"] <- SLoss
return(results)
}
Dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//Data//Dax_2000_d.csv")
a <- BaseSystem1SMA(Dax, 5, 0, "Dax")
a
Dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//Data//Dax_2000_d.csv")
source("Dev.R")
BaseSystem1SMA(Dax, 200, 0, "Dax")
BaseSystem1SMA(Dax, 200, -50, "Dax")
BaseSystem1SMA(Dax, 200, 0, "Dax")
source("Dev.R")
BaseSystem1SMA(Dax, 200, 0, "Dax")
library(TTR)
calcWinPer <- function(x){
wins <- length(x[x>0])
losses <- length(x[x<0])
return(wins/(wins+losses)*100)
}
calcAverageWin <- function(x){
#browser()
wins <- length(x)
winpl <- sum(x, na.rm=T)
return((winpl/wins))
}
BaseSystem1SMA <- function(Mkt, sma, SLoss, MktName){
# Calculates the profit/loss from trading according to SMA.
#
# Args:
#   x:
#   y:
#
# Returns:
#   profit/loss from trading according to SMA.
results <- 1:10
names(results) <- c("Mkt", "S Loss", "LongPL","ShortPL",
"L Win %", "Av L Win", "Av L Loss", "S Win %", "Av S Win", "Av S Loss")
sma.value <- SMA(Mkt["Open"], sma)  #create sma vector
Mkt <- cbind(Mkt, sma.value)        #add sma vector as new col
Mkt$Long <- ifelse(Mkt$Open > Mkt$sma.value, Mkt$Close - Mkt$Open, NA)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
if (SLoss < 0) {
Mkt$Long <- ifelse(Mkt$Long < SLoss, SLoss, Mkt$Long)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
}
Mkt$Short <- ifelse(Mkt$Open < Mkt$sma.value, Mkt$Open - Mkt$Close, NA)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
if (SLoss < 0) {
Mkt$Short <- ifelse(Mkt$Short < SLoss, SLoss, Mkt$Short)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
}
# Long Winner %
results["L Win %"] <- calcWinPer(Mkt$Long)
# Av Long Win
results["Av L Win"] <- calcAverageWin(Mkt$Long[Mkt$Long > 0])
# Av Long Loss
results["Av L Loss"] <- calcAverageWin(Mkt$Long[Mkt$Long < 0])
# Short Winner %
results["S Win %"] <- calcWinPer(Mkt$Short)
# Av Short Win
results["Av S Win"] <- calcAverageWin(Mkt$Short[Mkt$Short > 0])
# Av Short Loss
results["Av S Loss"] <- calcAverageWin(Mkt$Short[Mkt$Short < 0])
results <- round(results)
results["Mkt"] <- MktName
results["S Loss"] <- SLoss
return(results)
}
Dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//Data//Dax_2000_d.csv")
a <- BaseSystem1SMA(Dax, 5, 0, "Dax")
b <- BaseSystem1SMA(Dax, 25, 0, "Dax")
c <- BaseSystem1SMA(Dax, 50, 0, "Dax")
d <- BaseSystem1SMA(Dax, 100, 0, "Dax")
e <- BaseSystem1SMA(Dax, 200, 0, "Dax")
existingDF <- as.data.frame(matrix(seq(10),nrow=1,ncol=10))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
BaseSystem1SMA <- function(Mkt, sma, SLoss, MktName){
# Calculates the profit/loss from trading according to SMA.
#
# Args:
#   x:
#   y:
#
# Returns:
#   profit/loss from trading according to SMA.
results <- 1:11
names(results) <- c("Mkt", "SMA", "S Loss", "LongPL","ShortPL",
"L Win %", "Av L Win", "Av L Loss", "S Win %", "Av S Win", "Av S Loss")
sma.value <- SMA(Mkt["Open"], sma)  #create sma vector
Mkt <- cbind(Mkt, sma.value)        #add sma vector as new col
Mkt$Long <- ifelse(Mkt$Open > Mkt$sma.value, Mkt$Close - Mkt$Open, NA)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
if (SLoss < 0) {
Mkt$Long <- ifelse(Mkt$Long < SLoss, SLoss, Mkt$Long)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
}
Mkt$Short <- ifelse(Mkt$Open < Mkt$sma.value, Mkt$Open - Mkt$Close, NA)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
if (SLoss < 0) {
Mkt$Short <- ifelse(Mkt$Short < SLoss, SLoss, Mkt$Short)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
}
# Long Winner %
results["L Win %"] <- calcWinPer(Mkt$Long)
# Av Long Win
results["Av L Win"] <- calcAverageWin(Mkt$Long[Mkt$Long > 0])
# Av Long Loss
results["Av L Loss"] <- calcAverageWin(Mkt$Long[Mkt$Long < 0])
# Short Winner %
results["S Win %"] <- calcWinPer(Mkt$Short)
# Av Short Win
results["Av S Win"] <- calcAverageWin(Mkt$Short[Mkt$Short > 0])
# Av Short Loss
results["Av S Loss"] <- calcAverageWin(Mkt$Short[Mkt$Short < 0])
results <- round(results)
results["Mkt"] <- MktName
results["S Loss"] <- SLoss
results["SMA"] <- sma
return(results)
}
a <- BaseSystem1SMA(Dax, 5, 0, "Dax")
b <- BaseSystem1SMA(Dax, 25, 0, "Dax")
c <- BaseSystem1SMA(Dax, 50, 0, "Dax")
d <- BaseSystem1SMA(Dax, 100, 0, "Dax")
e <- BaseSystem1SMA(Dax, 200, 0, "Dax")
existingDF <- as.data.frame(matrix(seq(10),nrow=1,ncol=10))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
a <- BaseSystem1SMA(Dax, 200, -50, "Dax")
b <- BaseSystem1SMA(Dax, 200, -100, "Dax")
c <- BaseSystem1SMA(Dax, 5, -50, "Dax")
d <- BaseSystem1SMA(Dax, 5, -100, "Dax")
existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d)
existingDF <- existingDF[-1,] ; existingDF
a <- BaseSystem1SMA(Dax, 5, 0, "Dax")
b <- BaseSystem1SMA(Dax, 25, 0, "Dax")
c <- BaseSystem1SMA(Dax, 50, 0, "Dax")
d <- BaseSystem1SMA(Dax, 100, 0, "Dax")
e <- BaseSystem1SMA(Dax, 200, 0, "Dax")
existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
a <- BaseSystem1SMA(Dax, 200, -50, "Dax")
b <- BaseSystem1SMA(Dax, 200, -100, "Dax")
c <- BaseSystem1SMA(Dax, 5, -50, "Dax")
d <- BaseSystem1SMA(Dax, 5, -100, "Dax")
#existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
#names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d)
existingDF <- existingDF[-1,] ; existingDF
BaseSystem1SMA <- function(Mkt, sma, SLoss, MktName, Spread){
# Calculates the profit/loss from trading according to SMA.
#
# Args:
#   x:
#   y:
#
# Returns:
#   profit/loss from trading according to SMA.
results <- 1:11
names(results) <- c("Mkt", "SMA", "S Loss", "LongPL","ShortPL",
"L Win %", "Av L Win", "Av L Loss", "S Win %", "Av S Win", "Av S Loss")
sma.value <- SMA(Mkt["Open"], sma)  #create sma vector
Mkt <- cbind(Mkt, sma.value)        #add sma vector as new col
Mkt$Long <- ifelse(Mkt$Open > Mkt$sma.value, Mkt$Close - Mkt$Open - Spread, NA)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
if (SLoss < 0) {
Mkt$Long <- ifelse(Mkt$Long < SLoss, SLoss - Spread, Mkt$Long)
results["LongPL"] <- sum(Mkt$Long, na.rm=T)
}
Mkt$Short <- ifelse(Mkt$Open < Mkt$sma.value, Mkt$Open - Mkt$Close - Spread, NA)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
if (SLoss < 0) {
Mkt$Short <- ifelse(Mkt$Short < SLoss, SLoss - Spread, Mkt$Short)
results["ShortPL"] <- sum(Mkt$Short, na.rm=T)
}
# Long Winner %
results["L Win %"] <- calcWinPer(Mkt$Long)
# Av Long Win
results["Av L Win"] <- calcAverageWin(Mkt$Long[Mkt$Long > 0])
# Av Long Loss
results["Av L Loss"] <- calcAverageWin(Mkt$Long[Mkt$Long < 0])
# Short Winner %
results["S Win %"] <- calcWinPer(Mkt$Short)
# Av Short Win
results["Av S Win"] <- calcAverageWin(Mkt$Short[Mkt$Short > 0])
# Av Short Loss
results["Av S Loss"] <- calcAverageWin(Mkt$Short[Mkt$Short < 0])
results <- round(results)
results["Mkt"] <- MktName
results["S Loss"] <- SLoss
results["SMA"] <- sma
return(results)
}
a <- BaseSystem1SMA(Dax, 5, 0, "Dax", 2)
a
a <- BaseSystem1SMA(Dax, 5, 0, "Dax", 2)
b <- BaseSystem1SMA(Dax, 25, 0, "Dax", 2)
c <- BaseSystem1SMA(Dax, 50, 0, "Dax", 2)
d <- BaseSystem1SMA(Dax, 100, 0, "Dax", 2)
e <- BaseSystem1SMA(Dax, 200, 0, "Dax", 2)
existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
spr <- 2
a <- BaseSystem1SMA(Dax, 5, 0, "Dax", spr)
b <- BaseSystem1SMA(Dax, 25, 0, "Dax", spr)
c <- BaseSystem1SMA(Dax, 50, 0, "Dax", spr)
d <- BaseSystem1SMA(Dax, 100, 0, "Dax", spr)
e <- BaseSystem1SMA(Dax, 200, 0, "Dax", spr)
existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
spr <- 0
a <- BaseSystem1SMA(Dax, 5, 0, "Dax", spr)
b <- BaseSystem1SMA(Dax, 25, 0, "Dax", spr)
c <- BaseSystem1SMA(Dax, 50, 0, "Dax", spr)
d <- BaseSystem1SMA(Dax, 100, 0, "Dax", spr)
e <- BaseSystem1SMA(Dax, 200, 0, "Dax", spr)
existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
a <- BaseSystem1SMA(Dax, 200, -50, "Dax", spr)
b <- BaseSystem1SMA(Dax, 200, -100, "Dax", spr)
c <- BaseSystem1SMA(Dax, 5, -50, "Dax", spr)
d <- BaseSystem1SMA(Dax, 5, -100, "Dax", spr)
#existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
#names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d)
existingDF <- existingDF[-1,] ; existingDF
spr <- 1
a <- BaseSystem1SMA(Dax, 5, 0, "Dax", spr)
b <- BaseSystem1SMA(Dax, 25, 0, "Dax", spr)
c <- BaseSystem1SMA(Dax, 50, 0, "Dax", spr)
d <- BaseSystem1SMA(Dax, 100, 0, "Dax", spr)
e <- BaseSystem1SMA(Dax, 200, 0, "Dax", spr)
existingDF <- as.data.frame(matrix(seq(11),nrow=1,ncol=11))
names(existingDF) <- names(a)
existingDF <- rbind(existingDF, a, b, c, d, e)
existingDF <- existingDF[-1,] ; existingDF
a <- BaseSystem1SMA(Dax, 200, -50, "Dax", spr)
b <- BaseSystem1SMA(Dax, 200, -100, "Dax", spr)
c <- BaseSystem1SMA(Dax, 5, -50, "Dax", spr)
d <- BaseSystem1SMA(Dax, 5, -100, "Dax", spr)
existingDF <- rbind(existingDF, a, b, c, d)
existingDF <- existingDF[-1,] ; existingDF
source('D:/Allan/DropBox/MSc/Dissertation/Thesis/RCode/BaseSystem1SMA_MRevision.R')
source('D:/Allan/DropBox/MSc/Dissertation/Thesis/RCode/BaseSystem1SMA_MRevision.R')
source('D:/Allan/DropBox/MSc/Dissertation/Thesis/RCode/BaseSystem1SMA_MRevision.R')
setwd("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode")
source("Utils.R")
source("BaseSystem1SMA_MRevision.R")
mkt <- read.csv("../Data//F100_2000_d.csv")
mkt <- read.csv("../Data//Dax_2000_d.csv")
#ftse <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode//ftse.csv")
#dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode//dax.csv")
BaseSystem1SMA_Rev(mkt, 10, 0, "Dax")
BaseSystem1SMA_Rev(mkt, 10, -50, "Dax")
source('D:/Allan/DropBox/MSc/Dissertation/Thesis/RCode/BaseSystem1SMA_MRevision.R')
etwd("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode")
source("Utils.R")
source("BaseSystem1SMA_MRevision.R")
mkt <- read.csv("../Data//Dax_2000_d.csv")
#ftse <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode//ftse.csv")
#dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode//dax.csv")
BaseSystem1SMA_Rev(mkt, 10, -50, "Dax")
setwd("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode")
source("Utils.R")
source("BaseSystem1SMA_MRevision.R")
mkt <- read.csv("../Data//Dax_2000_d.csv")
#ftse <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode//ftse.csv")
#dax <- read.csv("D://Allan//DropBox//MSc//Dissertation//Thesis//RCode//dax.csv")
BaseSystem1SMA_Rev(mkt, 10, -50, "Dax")
Dax <- read.csv("Data//Dow_2000.csv",header=TRUE)
setwd("D:/Allan/DropBox/RWorkingDir")
Dax <- read.csv("Data//Dow_2000.csv",header=TRUE)
head(Dax)
Dax$OH <- Dax$High - Dax$Open
Dax$OL <- Dax$Open - Dax$Low
Dax$absOC <- abs(Dax$Open - Dax$Close) # really want absolute value here
head(Dax)
Dax <- read.csv("Data//Dow_2000.csv",header=TRUE)
head(Dax)
Dax$OH <- Dax$High - Dax$Open
Dax <- read.csv("Data//Dow_2000.csv",header=TRUE)
summary(Dax)
str(Dax)
setwd("D:/Allan/DropBox/MSc/Dissertation/Thesis")
Dax <- read.csv("Data//Dax_2000_d.csv",header=TRUE)
summary(Dax)
str(Dax)
head(Dax)
Dax$OH <- Dax$High - Dax$Open
Dax$OL <- Dax$Open - Dax$Low
Dax$absOC <- abs(Dax$Open - Dax$Close) # really want absolute value here
Dax$mn <- ifelse(Dax$OH>Dax$OL,Dax$OL,Dax$OH)
Dax$mx <- ifelse(Dax$OH>Dax$OL,Dax$OH,Dax$OL)
head(Dax)
range(Dax$mn)
quantile(Dax$mn) #pick a column ...
qq <- quantile(Dax$mn, probs=0.90)
qq
Dax <- read.csv("Data//N225_2000_d.csv",header=TRUE)
summary(Dax)
str(Dax)
head(Dax)
Dax$OH <- Dax$High - Dax$Open
Dax$OL <- Dax$Open - Dax$Low
Dax$absOC <- abs(Dax$Open - Dax$Close) # really want absolute value here
names(Dax)
#Dax$mm <- apply(Dax[9],2, function(x) if (Dax$OH>Dax$OL) Dax$OL else Dax$OH )
Dax$mn <- ifelse(Dax$OH>Dax$OL,Dax$OL,Dax$OH)
Dax$mx <- ifelse(Dax$OH>Dax$OL,Dax$OH,Dax$OL)
head(Dax)
range(Dax$mn)
quantile(Dax$mn) #pick a column ...
qq <- quantile(Dax$mn, probs=0.90)
qq
quantile(Dax$mn, probs=0.90)
quantile(Dax$mn, probs=0.80)
quantile(Dax$mn, probs=0.70)
